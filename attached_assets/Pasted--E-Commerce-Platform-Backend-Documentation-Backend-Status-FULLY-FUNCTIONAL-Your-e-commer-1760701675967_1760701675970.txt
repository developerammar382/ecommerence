# E-Commerce Platform - Backend Documentation

## üéâ Backend Status: FULLY FUNCTIONAL

Your e-commerce platform has a complete, production-ready backend with all requested features already implemented!

## üìã Implemented Features

### 1. User Management ‚úÖ
- **Authentication**: JWT-based token authentication with 7-day expiration
- **Authorization**: Role-based access control (admin, product_manager, customer)
- **Registration**: Email validation, password hashing with bcrypt
- **Login**: Secure authentication with account status checking
- **Profile Management**: View and update user profiles
- **Password Management**: Secure password change functionality

**API Endpoints:**
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `GET /api/auth/profile` - Get user profile (authenticated)
- `PUT /api/auth/profile` - Update profile (authenticated)
- `PUT /api/auth/change-password` - Change password (authenticated)

### 2. Product Management ‚úÖ
- **CRUD Operations**: Full Create, Read, Update, Delete for products
- **Category System**: Complete category management with slugs
- **Advanced Filtering**: Filter by category, price range, search terms
- **Featured Products**: Mark products as featured
- **Stock Tracking**: Real-time inventory management
- **Low Stock Alerts**: Automatic alerts for products below threshold

**API Endpoints:**
- `GET /api/products` - Get all products (with filters)
- `GET /api/products/:id` - Get product by ID
- `POST /api/products` - Create product (admin/product_manager)
- `PUT /api/products/:id` - Update product (admin/product_manager)
- `DELETE /api/products/:id` - Delete product (admin/product_manager)
- `GET /api/products/low-stock` - Get low stock products (admin)
- `GET /api/categories` - Get all categories
- `POST /api/categories` - Create category (admin)
- `PUT /api/categories/:id` - Update category (admin)
- `DELETE /api/categories/:id` - Delete category (admin)

### 3. Order Management ‚úÖ
- **Shopping Cart**: Add, update, remove items with stock validation
- **Checkout Process**: Multi-step checkout with address validation
- **Order Creation**: Transactional order processing with automatic stock updates
- **Order Tracking**: Track order status and history
- **Status Management**: Update order status, payment status, tracking numbers

**API Endpoints:**
- `GET /api/cart` - Get user cart (authenticated)
- `POST /api/cart` - Add item to cart (authenticated)
- `PUT /api/cart/:product_id` - Update cart item quantity (authenticated)
- `DELETE /api/cart/:product_id` - Remove from cart (authenticated)
- `DELETE /api/cart` - Clear cart (authenticated)
- `POST /api/orders` - Create order (authenticated)
- `GET /api/orders/my-orders` - Get user orders (authenticated)
- `GET /api/orders/:id` - Get order details (authenticated)
- `GET /api/orders` - Get all orders (admin)
- `PUT /api/orders/:id/status` - Update order status (admin)
- `PUT /api/orders/:id/payment` - Update payment status (admin)
- `PUT /api/orders/:id/tracking` - Update tracking number (admin)

### 4. Admin Dashboard ‚úÖ
- **Dashboard Statistics**: Total customers, products, orders, revenue
- **Sales Analytics**: Revenue analysis by week/month/year
- **Recent Orders**: Last 10 orders overview
- **Top Products**: Best-selling products
- **User Management**: Update user roles and status
- **Inventory Alerts**: Low stock product notifications

**API Endpoints:**
- `GET /api/admin/dashboard/stats` - Dashboard statistics (admin)
- `GET /api/admin/dashboard/analytics?period=month` - Sales analytics (admin)
- `GET /api/admin/users` - Get all users (admin)
- `PUT /api/admin/users/:id/status` - Update user status (admin)
- `PUT /api/admin/users/:id/role` - Update user role (admin)

### 5. Payment Gateway Integration ‚úÖ
- **Stripe Integration**: Full Stripe payment processing
- **Payment Intents**: Create and manage payment intents
- **Webhook Support**: Handle Stripe webhooks for payment events
- **Refund Processing**: Issue full or partial refunds

**API Endpoints:**
- `POST /api/payment/create-intent` - Create payment intent (authenticated)
- `GET /api/payment/intent/:paymentIntentId` - Get payment status (authenticated)
- `POST /api/payment/webhook` - Stripe webhook handler
- `POST /api/payment/refund` - Process refund (admin)

### 6. Inventory Management ‚úÖ
- **Stock Tracking**: Real-time stock levels
- **Automatic Updates**: Stock reduced on order completion
- **Low Stock Alerts**: Configurable threshold alerts
- **Stock Operations**: Add/subtract inventory

### 7. Security & Best Practices ‚úÖ
- **Password Security**: Bcrypt hashing with salt rounds
- **JWT Authentication**: Secure token-based auth
- **Input Validation**: Express-validator for all inputs
- **Rate Limiting**: 100 requests per 15 minutes
- **CORS Protection**: Configured CORS policies
- **Helmet Security**: HTTP security headers
- **Error Handling**: Centralized error handling middleware
- **SQL Injection Protection**: Parameterized queries
- **Trust Proxy**: Configured for Replit environment

## üóÑÔ∏è Database Schema

The platform uses PostgreSQL with the following tables:
- **users**: User accounts and authentication
- **products**: Product catalog
- **categories**: Product categories
- **cart**: Shopping cart items
- **orders**: Order records
- **order_items**: Order line items
- **reviews**: Product reviews (with rating system)
- **wishlist**: User wishlists

## üèóÔ∏è Architecture

**Backend Stack:**
- **Framework**: Express.js 5.x
- **Database**: PostgreSQL (Neon)
- **Authentication**: JWT (jsonwebtoken)
- **Validation**: Express-validator
- **Security**: Helmet, CORS, Rate limiting
- **Payment**: Stripe API

**Frontend Stack:**
- **Framework**: Vue 3 with Composition API
- **State Management**: Pinia
- **Routing**: Vue Router
- **HTTP Client**: Axios
- **Styling**: Tailwind CSS
- **UI Components**: Headless UI

## üìù Additional Features

### Wishlist System
- `POST /api/wishlist` - Add to wishlist
- `GET /api/wishlist` - Get user wishlist
- `DELETE /api/wishlist/:product_id` - Remove from wishlist

### Review System
- `POST /api/reviews` - Add product review
- `GET /api/reviews/:product_id` - Get product reviews
- `PUT /api/reviews/:id` - Update review
- `DELETE /api/reviews/:id` - Delete review

## üîê Environment Variables

Required secrets (already configured in Replit):
- `DATABASE_URL` - PostgreSQL connection string
- `JWT_SECRET` - JWT signing secret
- `STRIPE_SECRET_KEY` - Stripe secret key
- `VITE_STRIPE_PUBLIC_KEY` - Stripe publishable key
- `STRIPE_WEBHOOK_SECRET` - Stripe webhook secret (optional)

## üöÄ API Response Format

All API responses follow a consistent format:

**Success Response:**
```json
{
  "message": "Operation successful",
  "data": { ... }
}
```

**Error Response:**
```json
{
  "error": "Error message"
}
```

## üìä Admin Dashboard Features

The admin dashboard (accessible at `/admin`) includes:
- Real-time statistics and KPIs
- Sales analytics with charts
- Order management interface
- Product management (CRUD)
- Category management
- User management
- Inventory alerts
- Low stock product list

## üîÑ Order Flow

1. User adds products to cart
2. Cart validates stock availability
3. User proceeds to checkout
4. Order is created (transactional)
5. Stock is automatically reduced
6. Cart is cleared
7. Payment is processed via Stripe
8. Order status can be tracked
9. Admin can update status and tracking

## üõ°Ô∏è Security Features

- Passwords hashed with bcrypt (10 salt rounds)
- JWT tokens expire after 7 days
- Role-based access control for all admin routes
- Rate limiting on all API endpoints
- Input validation on all requests
- Parameterized SQL queries prevent injection
- CORS configured for security
- Helmet provides HTTP security headers